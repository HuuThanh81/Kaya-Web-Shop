'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _ = require('../');

var _CarouselItem = require('../CarouselItem');

var _CarouselItem2 = _interopRequireDefault(_CarouselItem);

var _CarouselIndicators = require('../CarouselIndicators');

var _CarouselIndicators2 = _interopRequireDefault(_CarouselIndicators);

var _CarouselControl = require('../CarouselControl');

var _CarouselControl2 = _interopRequireDefault(_CarouselControl);

var _CarouselCaption = require('../CarouselCaption');

var _CarouselCaption2 = _interopRequireDefault(_CarouselCaption);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('Carousel', function () {
  beforeEach(function () {
    jest.useFakeTimers();
  });

  afterEach(function () {
    jest.clearAllTimers();
  });

  var items = [{ src: '', altText: 'a', caption: 'caption 1' }, { src: '', altText: 'b', caption: 'caption 2' }, { src: '', altText: 'c', caption: 'caption 3' }];

  describe('captions', function () {
    it('should render a header and a caption', function () {
      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_CarouselCaption2.default, { captionHeader: 'abc', captionText: 'def' }));
      expect(wrapper.find('h3').length).toEqual(1);
      expect(wrapper.find('p').length).toEqual(1);
    });
  });

  describe('items', function () {
    it('should render custom tag', function () {
      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_CarouselItem2.default, { tag: 'image' }));
      expect(wrapper.find('image').length).toBe(1);
    });

    it('should render an image if one is passed in', function () {
      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _CarouselItem2.default,
        null,
        _react2.default.createElement('img', { src: items[0].src, alt: items[0].src })
      ));
      expect(wrapper.find('img').length).toEqual(1);
    });

    it('should render a caption if one is passed in', function () {
      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _CarouselItem2.default,
        null,
        _react2.default.createElement(_CarouselCaption2.default, { captionHeader: 'text', captionText: 'text' })
      ));
      expect(wrapper.find(_CarouselCaption2.default).length).toEqual(1);
    });

    describe('transitions', function () {
      it('should add the appropriate classes when entering right', function () {
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_CarouselItem2.default, { 'in': false }), { context: { direction: 'right' } });

        wrapper.setProps({ in: true });
        expect(wrapper.update().find('div').prop('className')).toEqual('carousel-item carousel-item-left carousel-item-next');
        jest.runTimersToTime(600);
        expect(wrapper.update().find('div').prop('className')).toEqual('carousel-item active');
        wrapper.setProps({ in: false });
        expect(wrapper.update().find('div').prop('className')).toEqual('carousel-item active carousel-item-left');
        jest.runTimersToTime(600);
        expect(wrapper.update().find('div').prop('className')).toEqual('carousel-item');
      });

      it('should add the appropriate classes when entering left', function () {
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_CarouselItem2.default, { 'in': false }), { context: { direction: 'left' } });

        wrapper.setProps({ in: true });
        expect(wrapper.update().find('div').prop('className')).toEqual('carousel-item carousel-item-right carousel-item-prev');
        jest.runTimersToTime(600);
        expect(wrapper.update().find('div').prop('className')).toEqual('carousel-item active');
        wrapper.setProps({ in: false });
        expect(wrapper.update().find('div').prop('className')).toEqual('carousel-item active carousel-item-right');
        jest.runTimersToTime(600);
        expect(wrapper.update().find('div').prop('className')).toEqual('carousel-item');
      });

      it('should call all callbacks when transitioning in and out', function () {
        var callbacks = {
          onEnter: jest.fn(),
          onEntering: jest.fn(),
          onEntered: jest.fn(),
          onExit: jest.fn(),
          onExiting: jest.fn(),
          onExited: jest.fn()
        };
        var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_CarouselItem2.default, Object.assign({ 'in': false }, callbacks)));
        wrapper.setProps({ in: true });
        expect(callbacks.onEnter).toHaveBeenCalled();
        expect(callbacks.onEntering).toHaveBeenCalled();
        expect(callbacks.onEntered).not.toHaveBeenCalled();
        jest.runTimersToTime(600);
        expect(callbacks.onEntered).toHaveBeenCalled();
        expect(callbacks.onExit).not.toHaveBeenCalled();

        wrapper.setProps({ in: false });
        expect(callbacks.onExit).toHaveBeenCalled();
        expect(callbacks.onExiting).toHaveBeenCalled();
        expect(callbacks.onExited).not.toHaveBeenCalled();
        jest.runTimersToTime(600);
        expect(callbacks.onExiting).toHaveBeenCalled();
        expect(callbacks.onExited).toHaveBeenCalled();

        wrapper.unmount();
      });
    });
  });

  describe('indicators', function () {
    it('should render a list with the right number of items', function () {
      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_CarouselIndicators2.default, { items: items, activeIndex: 0, onClickHandler: function onClickHandler() {} }));
      expect(wrapper.find('ol').length).toEqual(1);
      expect(wrapper.find('li').length).toEqual(3);
    });

    it('should append the correct active class', function () {
      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_CarouselIndicators2.default, { items: items, activeIndex: 0, onClickHandler: function onClickHandler() {} }));
      expect(wrapper.find('.active').hostNodes().length).toEqual(1);
    });

    it('should call the click hanlder', function () {
      var onClick = jest.fn();
      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_CarouselIndicators2.default, { items: items, activeIndex: 0, onClickHandler: onClick }));
      wrapper.find('li').first().simulate('click');
      expect(onClick).toHaveBeenCalled();
    });
  });

  describe('controls', function () {
    it('should render an anchor tag', function () {
      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_CarouselControl2.default, { direction: 'next', onClickHandler: function onClickHandler() {} }));
      expect(wrapper.find('a').length).toEqual(1);
    });

    it('should call the onClickHandler', function () {
      var onClick = jest.fn();
      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(_CarouselControl2.default, { direction: 'next', onClickHandler: onClick }));
      wrapper.find('a').first().simulate('click');
      expect(onClick).toHaveBeenCalled();
    });
  });

  describe('rendering', function () {
    it('should show the carousel indicators', function () {
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { activeIndex: 0, next: function next() {}, previous: function previous() {} },
        _react2.default.createElement(_CarouselIndicators2.default, { items: items, activeIndex: 0, onClickHandler: function onClickHandler() {} }),
        slides
      ));

      expect(wrapper.find(_CarouselIndicators2.default).length).toEqual(1);
    });

    it('should show controls', function () {
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { activeIndex: 0, next: function next() {}, previous: function previous() {} },
        slides,
        _react2.default.createElement(_CarouselControl2.default, { direction: 'prev', directionText: 'Previous', onClickHandler: function onClickHandler() {} }),
        _react2.default.createElement(_CarouselControl2.default, { direction: 'next', directionText: 'Next', onClickHandler: function onClickHandler() {} })
      ));

      expect(wrapper.find(_CarouselControl2.default).length).toEqual(2);
    });

    it('should show a single slide', function () {
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { activeIndex: 0, next: function next() {}, previous: function previous() {} },
        slides
      ));
      expect(wrapper.find('.carousel-item.active').hostNodes().length).toEqual(1);
    });

    it('should show indicators and controls', function () {
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { activeIndex: 0, next: function next() {}, previous: function previous() {} },
        _react2.default.createElement(_CarouselIndicators2.default, { items: items, activeIndex: 0, onClickHandler: function onClickHandler() {} }),
        slides,
        _react2.default.createElement(_CarouselControl2.default, { direction: 'prev', directionText: 'Previous', onClickHandler: function onClickHandler() {} }),
        _react2.default.createElement(_CarouselControl2.default, { direction: 'next', directionText: 'Next', onClickHandler: function onClickHandler() {} })
      ));

      expect(wrapper.find(_CarouselControl2.default).length).toEqual(2);
      expect(wrapper.find(_CarouselIndicators2.default).length).toEqual(1);
    });

    it('should tolerate booleans, null and undefined values rendered as children of Carousel', function () {
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { activeIndex: 0, next: function next() {}, previous: function previous() {} },
        null,
        true,
        false,
        undefined,
        function () {}(),
        _react2.default.createElement(_CarouselIndicators2.default, { items: items, activeIndex: 0, onClickHandler: function onClickHandler() {} }),
        slides,
        _react2.default.createElement(_CarouselControl2.default, { direction: 'prev', directionText: 'Previous', onClickHandler: function onClickHandler() {} }),
        _react2.default.createElement(_CarouselControl2.default, { direction: 'next', directionText: 'Next', onClickHandler: function onClickHandler() {} })
      ));
      expect(wrapper.find(_CarouselControl2.default).length).toEqual(2);
      expect(wrapper.find(_CarouselIndicators2.default).length).toEqual(1);
    });
  });

  describe('carouseling', function () {
    it('should set indicatorClicked to true if indicator clicked', function () {
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { activeIndex: 0, next: function next() {}, previous: function previous() {} },
        _react2.default.createElement(_CarouselIndicators2.default, { items: items, activeIndex: 0, onClickHandler: function onClickHandler() {
            return function () {};
          } }),
        slides,
        _react2.default.createElement(_CarouselControl2.default, { direction: 'prev', directionText: 'Previous', onClickHandler: function onClickHandler() {} }),
        _react2.default.createElement(_CarouselControl2.default, { direction: 'next', directionText: 'Next', onClickHandler: function onClickHandler() {} })
      ));

      wrapper.find(_CarouselIndicators2.default).find('li').first().simulate('click');
      expect(wrapper.state().indicatorClicked).toEqual(true);
    });

    it('should go right when the index increases', function () {
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { interval: 1000, activeIndex: 0, next: function next() {}, previous: function previous() {} },
        slides
      ));

      wrapper.setProps({ activeIndex: 1 });
      expect(wrapper.state().direction).toEqual('right');
    });

    it('should go left when the index decreases', function () {
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { interval: 1000, activeIndex: 1, next: function next() {}, previous: function previous() {} },
        slides
      ));

      wrapper.setProps({ activeIndex: 0 });
      expect(wrapper.state().direction).toEqual('left');
    });

    it('should go right if transitioning from the last to first slide by non-indicator', function () {
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { interval: 1000, activeIndex: 2, next: function next() {}, previous: function previous() {} },
        slides
      ));

      wrapper.setProps({ activeIndex: 0 });
      expect(wrapper.state().direction).toEqual('right');
    });

    it('should go left if transitioning from the last to first slide by indicator', function () {
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { interval: 1000, activeIndex: 2, next: function next() {}, previous: function previous() {} },
        _react2.default.createElement(_CarouselIndicators2.default, { items: items, activeIndex: 2, onClickHandler: function onClickHandler() {} }),
        slides,
        _react2.default.createElement(_CarouselControl2.default, { direction: 'prev', directionText: 'Previous', onClickHandler: function onClickHandler() {} }),
        _react2.default.createElement(_CarouselControl2.default, { direction: 'next', directionText: 'Next', onClickHandler: function onClickHandler() {} })
      ));

      wrapper.setState({ indicatorClicked: true });
      wrapper.setProps({ activeIndex: 0 });
      expect(wrapper.state().direction).toEqual('left');
    });

    it('should go left if transitioning from the first to last slide by non-indicator', function () {
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { interval: 1000, activeIndex: 0, next: function next() {}, previous: function previous() {} },
        slides
      ));

      wrapper.setProps({ activeIndex: 2 });
      expect(wrapper.state().direction).toEqual('left');
    });
  });

  it('should go right if transitioning from the first to last slide by indicator', function () {
    var slides = items.map(function (item, idx) {
      return _react2.default.createElement(
        _CarouselItem2.default,
        {
          key: idx
        },
        _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
      );
    });

    var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
      _.Carousel,
      { interval: 1000, activeIndex: 0, next: function next() {}, previous: function previous() {} },
      _react2.default.createElement(_CarouselIndicators2.default, { items: items, activeIndex: 0, onClickHandler: function onClickHandler() {} }),
      slides,
      _react2.default.createElement(_CarouselControl2.default, { direction: 'prev', directionText: 'Previous', onClickHandler: function onClickHandler() {} }),
      _react2.default.createElement(_CarouselControl2.default, { direction: 'next', directionText: 'Next', onClickHandler: function onClickHandler() {} })
    ));

    wrapper.setState({ indicatorClicked: true });
    wrapper.setProps({ activeIndex: 2 });
    expect(wrapper.state().direction).toEqual('right');
  });

  describe('interval', function () {
    it('should not autoplay by default', function () {
      var next = jest.fn();
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { next: next, previous: function previous() {}, interval: 1000, activeIndex: 0 },
        slides
      ));
      jest.runTimersToTime(1000);
      expect(next).not.toHaveBeenCalled();
      wrapper.unmount();
    });

    it('should autoplay when ride is carousel', function () {
      var next = jest.fn();
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { next: next, previous: function previous() {}, interval: 1000, activeIndex: 0, ride: 'carousel' },
        slides
      ));
      jest.runTimersToTime(1000);
      expect(next).toHaveBeenCalled();
      wrapper.unmount();
    });

    it('should accept a number', function () {
      var next = jest.fn();
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { next: next, previous: function previous() {}, interval: 1000, activeIndex: 0, ride: 'carousel' },
        slides
      ));
      jest.runTimersToTime(1000);
      expect(next).toHaveBeenCalled();
      wrapper.unmount();
    });

    it('should accept a boolean', function () {
      var next = jest.fn();
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { next: next, previous: function previous() {}, activeIndex: 0, interval: false },
        slides
      ));
      jest.runTimersToTime(5000);
      expect(next).not.toHaveBeenCalled();
      wrapper.unmount();
    });

    it('should default to 5000', function () {
      var next = jest.fn();
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });

      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { next: next, previous: function previous() {}, activeIndex: 0, ride: 'carousel' },
        slides
      ));
      jest.runTimersToTime(5000);
      expect(next).toHaveBeenCalled();
      wrapper.unmount();
    });

    it('it should accept a string', function () {
      var next = jest.fn();
      var slides = items.map(function (item, idx) {
        return _react2.default.createElement(
          _CarouselItem2.default,
          {
            key: idx
          },
          _react2.default.createElement(_CarouselCaption2.default, { captionText: item.caption, captionHeader: item.caption })
        );
      });
      var wrapper = (0, _enzyme.mount)(_react2.default.createElement(
        _.Carousel,
        { next: next, previous: function previous() {}, interval: '1000', activeIndex: 0, ride: 'carousel' },
        slides
      ));
      jest.runTimersToTime(1000);
      expect(next).toHaveBeenCalled();
      wrapper.unmount();
    });
  });
});

//# sourceMappingURL=Carousel.spec.js.map