"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _Carousel = _interopRequireDefault(require("../src/Carousel"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('<Carousel>', function () {
  var items = [_react.default.createElement(_Carousel.default.Item, {
    key: 1
  }, "Item 1 content"), _react.default.createElement(_Carousel.default.Item, {
    key: 2
  }, "Item 2 content")];
  it('Should show the correct item', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Carousel.default, {
      defaultActiveIndex: 1
    }, items));
    var carouselItems = wrapper.find('CarouselItem');
    assert.equal(carouselItems.at(0).is('.active'), false);
    assert.equal(carouselItems.at(1).is('.active'), true);
  });
  it('Should show the correct item with defaultActiveIndex', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Carousel.default, {
      defaultActiveIndex: 1
    }, items));
    var carouselItems = wrapper.find('CarouselItem');
    assert.equal(carouselItems.at(0).is('.active'), false);
    assert.equal(carouselItems.at(1).is('.active'), true);
    wrapper.find('.carousel-indicators > li').length.should.equal(2);
  });
  it('Should handle null children', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Carousel.default, {
      defaultActiveIndex: 1
    }, _react.default.createElement(_Carousel.default.Item, null, "Item 1 content"), null, false, _react.default.createElement(_Carousel.default.Item, null, "Item 2 content")));
    var carouselItems = wrapper.find('CarouselItem');
    assert.equal(carouselItems.at(0).is('.active'), false);
    assert.equal(carouselItems.at(1).is('.active'), true);
    wrapper.find('.carousel-indicators > li').length.should.equal(2);
  });
  it('Should call onSelect when indicator selected', function (done) {
    function onSelect(index) {
      expect(index).to.equal(0);
      done();
    }

    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Carousel.default, {
      activeIndex: 1,
      onSelect: onSelect
    }, items));
    wrapper.find('.carousel-indicators li').first().simulate('click');
  });
  it('Should call onSelect with direction', function (done) {
    function onSelect(index, direction, event) {
      expect(index).to.equal(0);
      expect(direction).to.equal('prev');
      expect(event).to.exist;
      done();
    }

    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Carousel.default, {
      activeIndex: 1,
      onSelect: onSelect
    }, items));
    wrapper.find('.carousel-indicators li').first().simulate('click');
  });
  it('Should show back button control on the first image if wrap is true', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Carousel.default, {
      defaultActiveIndex: 0,
      controls: true,
      wrap: true
    }, items)).find('Carousel');
    wrapper.assertSingle('a.carousel-control-prev');
  });
  it('Should show next button control on the last image if wrap is true', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Carousel.default, {
      defaultActiveIndex: 1,
      controls: true,
      wrap: true
    }, items)).find('Carousel');
    wrapper.assertSingle('a.carousel-control-next');
  });
  it('Should not show the prev button on the first image if wrap is false', function () {
    (0, _enzyme.mount)(_react.default.createElement(_Carousel.default, {
      defaultActiveIndex: 0,
      controls: true,
      wrap: false
    }, items)).assertNone('a.carousel-control-prev');
  });
  it('Should not show the next button on the last image if wrap is false', function () {
    (0, _enzyme.mount)(_react.default.createElement(_Carousel.default, {
      defaultActiveIndex: 1,
      controls: true,
      wrap: false
    }, items)).assertNone('a.carousel-control-next');
  });
  it('Should allow user to specify a previous and next icon', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Carousel.default, {
      controls: true,
      wrap: false,
      defaultActiveIndex: 1,
      prevIcon: _react.default.createElement("span", {
        className: "ficon ficon-left"
      }),
      nextIcon: _react.default.createElement("span", {
        className: "ficon ficon-right"
      })
    }, _react.default.createElement(_Carousel.default.Item, null, "Item 1 content"), _react.default.createElement(_Carousel.default.Item, null, "Item 2 content"), _react.default.createElement(_Carousel.default.Item, null, "Item 3 content")));
    wrapper.assertSingle('.ficon-left');
    wrapper.assertSingle('.ficon-right');
  });
  it('Should allow user to specify a previous and next SR label', function () {
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Carousel.default, {
      controls: true,
      wrap: false,
      defaultActiveIndex: 1,
      prevLabel: "Previous awesomeness",
      nextLabel: "Next awesomeness"
    }, _react.default.createElement(_Carousel.default.Item, null, "Item 1 content"), _react.default.createElement(_Carousel.default.Item, null, "Item 2 content"), _react.default.createElement(_Carousel.default.Item, null, "Item 3 content")));
    var labels = wrapper.find('.sr-only');
    assert.equal(labels.length, 2);
    assert.equal(labels.at(0).text(), 'Previous awesomeness');
    assert.equal(labels.at(1).text(), 'Next awesomeness');
  });
  it('Should not render labels when values are falsy', function () {
    [null, ''].forEach(function (falsyValue) {
      var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Carousel.default, {
        controls: true,
        wrap: false,
        defaultActiveIndex: 1,
        prevLabel: falsyValue,
        nextLabel: falsyValue
      }, _react.default.createElement(_Carousel.default.Item, null, "Item 1 content"), _react.default.createElement(_Carousel.default.Item, null, "Item 2 content"), _react.default.createElement(_Carousel.default.Item, null, "Item 3 content")));
      assert.equal(wrapper.find('.sr-only').length, 0, "should not render labels for value ".concat(falsyValue));
    });
  });
  it('Should transition properly when slide animation is disabled', function (done) {
    var spy = sinon.spy();
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Carousel.default, {
      defaultActiveIndex: 0,
      slide: false,
      onSelect: spy
    }, items));
    wrapper.find('a.carousel-control-next').simulate('click');
    setTimeout(function () {
      spy.should.have.calledOnce;
      wrapper.find('a.carousel-control-prev').simulate('click');
      setTimeout(function () {
        spy.should.have.calledTwice;
        done();
      }, 150);
    }, 150);
  });
  it('Should render on update, active item > new child length', function () {
    // default active is the 2nd item, which will be removed on
    // subsequent render
    var wrapper = (0, _enzyme.mount)(_react.default.createElement(_Carousel.default, {
      defaultActiveIndex: 1
    }, items));
    var carouselItems = wrapper.find('CarouselItem');
    assert.equal(carouselItems.at(0).is('.active'), false);
    assert.equal(carouselItems.at(1).is('.active'), true);
    wrapper.find('.carousel-indicators > li').length.should.equal(2);
    var fewerItems = items.slice();
    fewerItems.pop();
    wrapper.setProps({
      children: fewerItems
    });
    carouselItems = wrapper.find('CarouselItem');
    wrapper.find('.carousel-indicators > li').length.should.equal(1);
    wrapper.find('div.carousel-item').length.should.equal(1);
  });
});

//# sourceMappingURL=CarouselSpec.js.map