'use strict';

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _enzyme = require('enzyme');

var _ = require('../');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var items = [{ src: '', altText: 'a', caption: 'caption 1' }, { src: '', altText: 'b', caption: 'caption 2' }, { src: '', altText: 'c', caption: 'caption 3' }];

describe('UncontrolledCarousel', function () {
  it('should be an Carousel', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items }));
    expect(carousel.type()).toBe(_.Carousel);
  });

  it('should have activeIndex default to 0', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items }));
    expect(carousel.prop('activeIndex')).toBe(0);
  });

  it('should have next function', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items }));
    expect(carousel.prop('next')).toEqual(expect.any(Function));
  });

  it('should have prev function', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items }));
    expect(carousel.prop('previous')).toEqual(expect.any(Function));
  });

  it('should have ride set to "carousel" by default', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items }));
    expect(carousel.prop('ride')).toBe('carousel');
  });

  it('should have ride set to undefined when autoPlay is false', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items, autoPlay: false }));
    expect(carousel.prop('ride')).toBe(undefined);
  });

  it('should have ride set to "carousel" when autoPlay is true', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items, autoPlay: true }));
    expect(carousel.prop('ride')).toBe('carousel');
  });

  it('should increase the activeIndex when next is called', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items }));
    var instance = carousel.instance();
    instance.next();
    carousel.update();
    expect(carousel.prop('activeIndex')).toBe(1);
  });

  it('should not increase the activeIndex when next is called while animating', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items }));
    var instance = carousel.instance();
    instance.animating = true;
    instance.next();
    expect(carousel.prop('activeIndex')).toBe(0);
  });

  it('should wrap the activeIndex when next is called on the last item', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items }));
    var instance = carousel.instance();
    instance.next();
    carousel.update();
    expect(carousel.prop('activeIndex')).toBe(1);
    instance.next();
    carousel.update();
    expect(carousel.prop('activeIndex')).toBe(2);
    instance.next();
    carousel.update();
    expect(carousel.prop('activeIndex')).toBe(0);
    instance.next();
    carousel.update();
    expect(carousel.prop('activeIndex')).toBe(1);
  });

  it('should decrease the activeIndex when previous is called', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items }));
    var instance = carousel.instance();
    instance.next();
    carousel.update();
    expect(carousel.prop('activeIndex')).toBe(1);
    instance.previous();
    carousel.update();
    expect(carousel.prop('activeIndex')).toBe(0);
  });

  it('should not decrease the activeIndex when previous is called while animating', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items }));
    var instance = carousel.instance();
    instance.next();
    carousel.update();
    expect(carousel.prop('activeIndex')).toBe(1);
    instance.animating = true;
    instance.previous();
    carousel.update();
    expect(carousel.prop('activeIndex')).toBe(1);
  });

  it('should wrap the activeIndex when previous is called on the first item', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items }));
    var instance = carousel.instance();
    instance.previous();
    carousel.update();
    expect(carousel.prop('activeIndex')).toBe(2);
  });

  it('should set the activeIndex when goToIndex is called with a value', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items }));
    var instance = carousel.instance();
    instance.goToIndex(2);
    carousel.update();
    expect(carousel.prop('activeIndex')).toBe(2);
  });

  it('should not set the activeIndex when goToIndex is called with a value when animating', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items }));
    var instance = carousel.instance();
    instance.animating = true;
    instance.goToIndex(2);
    carousel.update();
    expect(carousel.prop('activeIndex')).toBe(0);
  });

  it('should track animating of the slides', function () {
    var carousel = (0, _enzyme.shallow)(_react2.default.createElement(_.UncontrolledCarousel, { items: items }));
    var instance = carousel.instance();
    expect(instance.animating).toBe(false);
    instance.onExiting();
    expect(instance.animating).toBe(true);
    instance.onExited();
    expect(instance.animating).toBe(false);
  });
});

//# sourceMappingURL=UncontrolledCarousel.spec.js.map